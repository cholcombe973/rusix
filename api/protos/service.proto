syntax = "proto2";
option optimize_for = SPEED;

package rusix;

enum Fop {
	IPC          = 1;
	LOOKUP       = 2;
	MKNOD        = 3;
	CREATE       = 4;

	OPEN         = 5;
	STATFS       = 6;
	OPENDIR      = 7;
	READDIR      = 8;
	READDIRP     = 9;
	FSYNCDIR     = 10;
	SYMLINK      = 11;
	UNLINK       = 12;
	LINK         = 13;
	MKDIR        = 14;
	RMDIR        = 15;
	RENAME       = 16;
	ENTRYLK      = 17;
	FENTRYLK     = 18;

	/* Inode read operations */
	STAT         = 19;
	FSTAT        = 20;
	ACCESS       = 21;
	READLINK     = 22;
	GETXATTR     = 23;
	FGETXATTR    = 24;
	READV        = 25;
	FLUSH        = 26;
	FSYNC        = 27;
	INODELK      = 28;
	FINODELK     = 29;
	LK           = 30;
	LEASE        = 31;

	/* Inode write operations */
	FREMOVEXATTR = 32;
	REMOVEXATTR  = 33;
	SETXATTR     = 34;
	FSETXATTR    = 35;
	TRUNCATE     = 36;
	FTRUNCATE    = 37;
	WRITEV       = 38;
	XATTROP      = 39;
	FXATTROP     = 40;
	SETATTR      = 41;
	FSETATTR     = 42;
	FALLOCATE    = 43;
	DISCARD      = 44;
	ZEROFILL     = 45;
}

enum Event {
	PARENT_UP = 1;
	POLLIN = 2;
	POLLOUT = 3;
	POLLERR = 4;
	CHILD_UP = 5;
	CHILD_DOWN = 6;
	CHILD_CONNECTING = 7;
	CLEANUP = 8;
	TRANSPORT_CONNECTED = 9;
	VOLFILE_MODIFIED = 10;
	GRAPH_NEW = 11;
	TRANSLATOR_INFO = 12;
	TRANSLATOR_OP = 13;
	AUTH_FAILED = 14;
	VOLUME_DEFRAG = 15;
	PARENT_DOWN = 16;
	VOLUME_BARRIER_OP = 17;
	UPCALL = 18;
	SCRUB_STATUS = 19;
	SOME_DESCENDENT_DOWN = 20;
	SCRUB_ONDEMAND = 21;
	SOME_DESCENDENT_UP = 22;
	CHILD_PING = 23;
	MAXVAL = 24;
}

/* List of compound fops. Add fops at the end. */
enum CompoundFop {
	CFOP_NON_PREDEFINED = 1;
	CFOP_XATTROP_WRITEV = 2;
	CFOP_XATTROP_UNLOCK = 3;
	CFOP_PUT = 4;
	CFOP_MAXVALUE = 5;
}

enum Mgmt {
	MGMT_NULL = 1;
	MGMT_MAXVALUE = 2;
}

enum OpType {
	OP_TYPE_NULL = 1;
	OP_TYPE_FOP = 2;
	OP_TYPE_MGMT = 3;
	OP_TYPE_MAX = 4;
}

enum LockCmds {
	LK_GETLK = 1;
	LK_SETLK = 2;
	LK_SETLKW = 3;
	LK_RESLK_LCK = 4;
	LK_RESLK_LCKW = 5;
	LK_RESLK_UNLCK = 6;
	LK_GETLK_FD = 7;
}

enum LockTypes {
	LK_F_RDLCK = 1;
	LK_F_WRLCK = 2;
	LK_F_UNLCK = 3;
	LK_EOL = 4;
}

enum LeaseTypes {
	NONE  = 1;
	RD_LEASE = 2;
	RW_LEASE = 3;
	LEASE_MAX_TYPE = 4;
}

enum LeaseCmds {
	GET_LEASE = 1;
	SET_LEASE = 2;
	UNLK_LEASE = 3;
}

message Lease {
	required LeaseCmds  cmd = 1;
	required LeaseTypes lease_type = 2;
	required string  lease_id = 3;
	required uint32 lease_flags = 4;
}

enum LockRecoveryCmds {
	F_RESLK_LCK = 1;
	F_RESLK_LCKW = 2;
	F_RESLK_UNLCK = 3;
	F_GETLK_FD = 4;
}

enum LockDomain {
	LOCK_POSIX = 1;
	LOCK_INTERNAL = 2;
}

enum EntryLockCmd {
	ENTRYLK_LOCK = 1;
	ENTRYLK_UNLOCK = 2;
	ENTRYLK_LOCK_NB = 3;
}

enum EntryLockType {
	ENTRYLK_RDLCK = 1;
	ENTRYLK_WRLCK = 2;
}

message lkowner_t {
	required string data = 2;
}

enum XattropFlags {
	XATTROP_ADD_ARRAY = 1;
	XATTROP_ADD_ARRAY64 = 2;
	XATTROP_OR_ARRAY = 3;
	XATTROP_AND_ARRAY = 4;
	XATTROP_GET_AND_SET = 5;
	XATTROP_ADD_ARRAY_WITH_DEFAULT = 6;
	XATTROP_ADD_ARRAY64_WITH_DEFAULT = 7;
}

enum SeekWhat {
	SEEK_DATA = 1;
	SEEK_HOLE = 2;
}

enum UpcallFlags {
	UPCALL_NULL = 1;
	UPCALL_CI_STAT = 3;
	UPCALL_CI_XATTR = 4;
	UPCALL_CI_RENAME = 5;
	UPCALL_CI_NLINK = 6;
	UPCALL_CI_FORGET = 7;
	UPCALL_LEASE_RECALL = 8;
	UPCALL_FLAGS_MAXVALU = 9;
}

enum dict_data_type_t {
	DATA_TYPE_UNKNOWN = 1;
	DATA_TYPE_INT = 2;
	DATA_TYPE_UINT = 3;
	DATA_TYPE_DOUBLE = 4;
	DATA_TYPE_STR = 5;
	DATA_TYPE_PTR = 6;
	DATA_TYPE_GFUUID = 7;
	DATA_TYPE_IATT = 8;
	DATA_TYPE_MAX = 9;
}

enum ResultType{
	OK = 1;
	ERR = 2;
}

message KeyValue {
	required string key = 1;
	// Serialized data values.  TODO: What to serialize them with?
	required bytes data = 2;
}

message Dict {
	repeated KeyValue data = 1;
}

message OpResult {
	required ResultType result = 1;
	// error_msg is set if ERR
	optional int32 errno = 2;
	optional string error_msg = 3;
}

message Operation {
	required string name = 1;
	optional bytes data = 2;
}
  
message Statfs {
	required uint64 bsize = 1;
	required uint64 frsize = 2;
	required uint64 blocks = 3;
	required uint64 bfree = 4;
	required uint64 bavail = 5;
	required uint64 files = 6;
	required uint64 ffree = 7;
	required uint64 favail = 8;
	required uint64 fsid = 9;
	required uint64 flag = 10;
	required uint64 namemax = 11;
}


message ProtoFlock {
	required uint32   type = 1;
	required uint32   whence = 2;
	required uint64   start = 3;
	required uint64   len = 4;
	required uint32   pid = 5;
	required string   lk_owner = 6;
} 

message ProtoLease {
	required uint32   cmd = 1;
	required uint32   lease_type = 2;
	required string   lease_id = 3;
	required uint32   lease_flags = 4;
} 

message Iatt {
	required string    ia_gfid = 1;
	required uint64    ia_ino = 2;
	required uint64    ia_dev = 3;
	required uint32    mode = 4;
	required uint32    ia_nlink = 5;
	required uint32    ia_uid = 6;
	required uint32    ia_gid = 7;
	required uint64    ia_rdev = 8;
	required uint64    ia_size = 9;
	required uint32    ia_blksize = 10;
	required uint64    ia_blocks = 11;
	required uint32    ia_atime = 12;
	required uint32    ia_atime_nsec = 13;
	required uint32    ia_mtime = 14;
	required uint32    ia_mtime_nsec = 15;
	required uint32    ia_ctime = 16;
	required uint32    ia_ctime_nsec = 17;
}


message cbk_cache_invalidationRequest {
	required string   gfid = 1;
	required uint32   event_type = 2;
	required uint32   flags = 3;
	required uint32   expire_time_attr = 4;
	required Iatt stat = 5;
	required Iatt parent_stat = 6;
	required Iatt oldparent_stat = 7;
	optional bytes extra_data = 8;
}

message StatRequest {
	required string gfid = 1;
	optional bytes extra_data = 2;
}

message StatResponse {
	required OpResult result = 1;
	optional Iatt stat = 2;
	optional bytes extra_data = 3;
}

message ReadlinkRequest {
	required string gfid = 1;
	required uint32 size = 2;
	optional bytes extra_data = 3;
}

message ReadlinkResponse {
	required OpResult result = 1;
	optional Iatt buf = 2;
	optional string path = 3;
	optional bytes extra_data = 4;
} 


message MknodRequest {
	required bytes  pargfid = 1;
	required uint64 dev = 2;
	required uint32 mode = 3;
	required uint32 umask = 4;
	required string bname = 5;
	optional bytes extra_data = 6;
} 

message MknodResponse {
	required OpResult result = 1;
	optional Iatt stat = 2;
	optional Iatt preparent = 3;
	optional Iatt postparent = 4;
	optional bytes extra_data = 5;
}

 message  MkdirRequest {
	required bytes  pargfid = 1;
	required uint32 mode = 2;
	required uint32 umask = 3;
	required string bname = 4;
	optional bytes extra_data = 5;
}

message  MkdirResponse {
	required OpResult result = 1;
	optional Iatt stat = 2;
	optional Iatt preparent = 3;
	optional Iatt postparent = 4;
	optional bytes extra_data = 5;
} 


message UnlinkRequest {
	required bytes  pargfid = 1;
	required string     bname = 2;
	required uint32 xflags = 3;
	optional bytes extra_data = 4;
}

message   UnlinkResponse {
	required OpResult result = 1;
	optional Iatt preparent = 2;
	optional Iatt postparent = 3;
	optional bytes extra_data = 4;
}

message   RmdirRequest {
	required bytes  pargfid = 1;
	required int32  xflags = 2;
	required string bname = 3;
	optional bytes extra_data = 4;
}

message   RmdirResponse {
	required OpResult result = 1;
	optional Iatt preparent = 2;
	optional Iatt postparent = 3;
	optional bytes extra_data = 4;
}

message SymlinkRequest {
	required bytes  pargfid = 1;
	required string     bname = 2;
	required uint32 umask = 3;
	required string     linkname = 4;
	optional bytes extra_data = 5;
}

message  SymlinkResponse {
	required OpResult result = 1;
	optional Iatt stat = 2;
	optional Iatt preparent = 3;
	optional Iatt postparent = 4;
	optional bytes extra_data = 5;
}


message   RenameRequest {
	required string  oldgfid = 1;
	required string  newgfid = 2;
	required string  oldbname = 3;
	required string  newbname = 4;
	optional bytes extra_data = 5;
}

message   RenameResponse {
	required OpResult result = 1;
	optional Iatt stat = 2;
	optional Iatt preoldparent = 3;
	optional Iatt postoldparent = 4;
	optional Iatt prenewparent = 5;
	optional Iatt postnewparent = 6;
	optional bytes extra_data = 7;
}

message LinkRequest {
	required string  oldgfid = 1;
	required string  newgfid = 2;
	required string  newbname = 3;
	optional bytes extra_data = 4;
}

message LinkResponse {
	required OpResult result = 1;
	optional Iatt stat = 2;
	optional Iatt preparent = 3;
	optional Iatt postparent = 4;
	optional bytes extra_data = 5;
}

message   truncateRequest {
	required string gfid = 1;
	required uint64 offset = 2;
	optional bytes extra_data = 3;
}

message   truncateResponse {
	required OpResult result = 1;
	optional Iatt prestat = 2;
	optional Iatt poststat = 3;
	optional bytes extra_data = 4;
}

message   OpenRequest {
	required string gfid = 1;
	required uint32 flags = 2;
	optional bytes extra_data = 3;
}

message   OpenResponse {
	required OpResult result = 1;
	optional uint64 fd = 2;
	optional bytes extra_data = 3;
}

 message   ReadRequest {
	required string gfid = 1;
	required uint64  fd = 2;
	required uint64 offset = 3;
	required uint32 size = 4;
	required uint32 flag = 5;
	optional bytes extra_data = 6;
}

message  ReadResponse {
	required OpResult result = 1;
	optional Iatt stat = 2;
	optional uint32 size = 3;
	optional bytes extra_data = 4;
}

message LookupRequest {
	required string gfid = 1;
	required bytes  pargfid = 2;
	required uint32 flags = 3;
	required string     bname = 4;
	optional bytes extra_data = 5;
}

message LookupResponse {
	required OpResult result = 1;
	optional Iatt stat = 2;
	optional Iatt postparent = 3;
	optional bytes extra_data = 4;
}

message WriteRequest {
	required string gfid = 1;
	required uint64  fd = 2;
	required uint64 offset = 3;
	required uint32 size = 4;
	required uint32 flag = 5;
	optional bytes extra_data = 6;
}

message WriteResponse {
	required OpResult result = 1;
	optional Iatt prestat = 2;
	optional Iatt poststat = 3;
	optional bytes extra_data = 4;
}

message StatfsRequest  {
	required string gfid = 1;
	optional bytes extra_data = 2;
}  

message StatfsResponse {
	required OpResult result = 1;
	optional Statfs statfs = 2;
	optional bytes extra_data = 3;
}  

 message LockRequest {
	required string gfid = 1;
	required int64 fd = 2;
	required uint32  cmd = 3;
	required uint32  type = 4;
	required ProtoFlock flock = 5;
	optional bytes extra_data = 6;
}  
 message LockResponse {
	required OpResult result = 1;
	optional ProtoFlock flock = 2;
	optional bytes extra_data = 3;
}  

message LeaseRequest {
	required string gfid = 1;
	required ProtoLease lease = 2;
	optional bytes extra_data = 3;
}  

message LeaseResponse {
	required OpResult result = 1;
	optional ProtoLease lease = 2;
	optional bytes extra_data = 3;
}  

message RecallLeaseRequest {
	required bytes gfid = 1;
	required uint32 lease_type = 2;
	required bytes tid = 3;
	optional bytes extra_data = 4;
}  

message InodelkRequest {
	required string gfid = 1;
	required uint32 cmd = 2;
	required uint32 type = 3;
	required ProtoFlock flock = 4;
	required string     volume = 5;
	optional bytes extra_data = 6;
}  

message FinodelkRequest {
	required string gfid = 1;
	required uint64  fd = 2;
	required uint32 cmd = 3;
	required uint32 type = 4;
	required ProtoFlock flock = 5;
	required string volume = 6;
	optional bytes extra_data = 7;
} 


 message FlushRequest {
	required string gfid = 1;
	required uint64  fd = 2;
	optional bytes extra_data = 3;
}  

 message FsyncRequest {
	required string gfid = 1;
	required uint64  fd = 2;
	required uint32 data = 3;
	optional bytes extra_data = 4;
}  
 message FsyncResponse {
	required OpResult result = 1;
	optional Iatt prestat = 2;
	optional Iatt poststat = 3;
	optional bytes extra_data = 4;
}  


 message SetxattrRequest {
	required string gfid = 1;
	required uint32 flags = 2;
	required Dict dict = 3;
	optional bytes extra_data = 4;
}  

 message FsetxattrRequest {
	required string gfid = 1;
	required int64  fd = 2;
	required uint32 flags = 3;
	required Dict dict = 4;
	optional bytes extra_data = 5;
}  

 message XattropRequest {
	required string gfid = 1;
	required uint32 flags = 2;
	required Dict dict = 3;
	optional bytes extra_data = 4;
}  

 message XattropResponse  {
	required OpResult result = 1;
	optional Dict dict = 2;
	optional bytes extra_data = 3;
}  

 message FxattropRequest {
	required string gfid = 1;
	required uint64  fd = 2;
	required uint32 flags = 3;
	required Dict dict = 4;
	optional bytes extra_data = 5;
}  

 message FxattropResponse  {
	required OpResult result = 1;
	optional Dict dict = 2;
	optional bytes extra_data = 3;
}  


message GetXattrRequest  {
	required string gfid = 1;
	required uint32 namelen = 2;
	required string     name = 3;
	optional bytes extra_data = 4;
}  

message GetxattrResponse {
	required OpResult result = 1;
	optional Dict dict = 2;
	optional bytes extra_data = 3;
}  


 message FgetxattrRequest  {
	required string gfid = 1;
	required uint64  fd = 2;
	required uint32 namelen = 3;
	required string     name = 4;
	optional bytes extra_data = 5;
}  
 message FgetxattrResponse {
	required OpResult result = 1;
	optional Dict dict = 2;
	optional bytes extra_data = 3;
}  

 message RemovexattrRequest {
	required string gfid = 1;
	required string     name = 2;
	optional bytes extra_data = 3;
}  

 message FremovexattrRequest {
	required string gfid = 1;
	required uint64  fd = 2;
	required string     name = 3;
	optional bytes extra_data = 4;
}  

 message OpendirRequest {
	required string gfid = 1;
	optional bytes extra_data = 2;
}  
 message OpendirResponse {
	required OpResult result = 1;
	optional uint64 fd = 2;
	optional bytes extra_data = 3;
}  


 message FsyncdirRequest {
	required string gfid = 1;
	required uint64  fd = 2;
	optional bytes extra_data = 3;
}  

 message ReaddirRequest  {
	required string gfid = 1;
	required uint64  fd = 2;
	required uint64 offset = 3;
	required uint32 size = 4;
	optional bytes extra_data = 5;
}

 message ReaddirpRequest {
	required string gfid = 1;
	required uint64  fd = 2;
	required uint64 offset = 3;
	required uint32 size = 4;
	required Dict dict = 5;
}  


message AccessRequest  {
	required string gfid = 1;
	required uint32 mask = 2;
	optional bytes extra_data = 3;
} 


message CreateRequest {
	required bytes  pargfid = 1;
	required uint32 flags = 2;
	required uint32 mode = 3;
	required uint32 umask = 4;
	required string bname = 5;
	optional bytes extra_data = 6;
}  

message  CreateResponse {
	required OpResult result = 1;
	optional Iatt stat = 2;
	optional uint64 fd = 3;
	optional Iatt preparent = 4;
	optional Iatt postparent = 5;
	optional bytes extra_data = 6;
} 

message FtruncateRequest  {
	required string gfid = 1;
	required uint64  fd = 2;
	required uint64 offset = 3;
	optional bytes extra_data = 4;
} 
message FtruncateResponse {
	required OpResult result = 1;
	optional Iatt prestat = 2;
	optional Iatt poststat = 3;
	optional bytes extra_data = 4;
} 

message FstatRequest {
	required string gfid = 1;
	required uint64  fd = 2;
	optional bytes extra_data = 3;
}  

message FstatResponse {
	required OpResult result = 1;
	optional Iatt stat = 2;
	optional bytes extra_data = 3;
}  

 message   EntrylkRequest {
	required string gfid = 1;
	required uint32  cmd = 2;
	required uint32  type = 3;
	required uint64  namelen = 4;
	required string      name = 5;
	required string      volume = 6;
	optional bytes extra_data = 7;
}

 message   FentrylkRequest {
	required string gfid = 1;
	required uint64   fd = 2;
	required uint32  cmd = 3;
	required uint32  type = 4;
	required uint64  namelen = 5;
	required string      name = 6;
	required string      volume = 7;
	optional bytes extra_data = 8;
}


 message SetattrRequest {
	required string gfid = 1;
	required Iatt stbuf = 2;
	required int32 valid = 3;
	optional bytes extra_data = 4;
}  
 message SetattrResponse {
	required OpResult result = 1;
	optional Iatt statpre = 2;
	optional Iatt statpost = 3;
	optional bytes extra_data = 4;
}  

 message FsetattrRequest {
	required uint64        fd = 1;
	required Iatt stbuf = 2;
	required int32        valid = 3;
	optional bytes extra_data = 4;
}  
 message FsetattrResponse {
	required OpResult result = 1;
	optional Iatt statpre = 2;
	optional Iatt statpost = 3;
	optional bytes extra_data = 4;
}  

 message FallocateRequest {
	required string  gfid = 1;
	required uint64	fd = 2;
	required uint32	flags = 3;
	required uint64	offset = 4;
	required uint64	size = 5;
	optional bytes extra_data = 6;
}  

 message FallocateResponse {
	required OpResult result = 1;
	optional Iatt statpre = 2;
	optional Iatt statpost = 3;
	optional bytes extra_data = 4;
}  

 message DiscardRequest {
	required string	gfid = 1;
	required uint64  fd = 2;
	required uint64	offset = 3;
	required uint64	size = 4;
	optional bytes extra_data = 5;
}  

message DiscardResponse {
	required OpResult result = 1;
	optional Iatt statpre = 2;
	optional Iatt statpost = 3;
	optional bytes extra_data = 4;
}  

message ZerofillRequest {
	required string  gfid = 1;
	required uint64 fd = 2;
	required uint64 offset = 3;
	required uint64 size = 4;
	optional bytes extra_data = 5;
}  

message ZerofillResponse {
	required OpResult result = 1;
	optional Iatt statpre = 2;
	optional Iatt statpost = 3;
	optional bytes extra_data = 4;
}  


message RchecksumRequest {
	required uint64 fd = 1;
	required uint64 offset = 2;
	required uint32 len = 3;
	optional bytes extra_data = 4;
}  

message RchecksumResponse {
	required OpResult result = 1;
	optional uint32 weak_checksum = 2;
	optional bytes strong_checksum = 3;
	optional bytes extra_data = 4;
} 


message IpcRequest {
	required uint32 op = 1;
	optional bytes extra_data = 2;
}

message IpcResponse {
	required OpResult result = 1;
	optional bytes extra_data = 2;
}


message SeekRequest {
	required string    gfid = 1;
	required uint64    fd = 2;
	required uint64  offset = 3;
	required int32       what = 4;
	optional bytes extra_data = 5;
}

message SeekResponse {
	required OpResult result = 1;
	optional uint64  offset = 2;
	optional bytes extra_data = 3;
}


message SetVolumeRequest {
	required Dict dict = 1;
}  

message  SetVolumeResponse {
	required OpResult result = 1;
	optional Dict dict = 2;
} 

message GetSpecRequest {
	required uint32 flags = 1;
	required string     key = 2;
	optional bytes extra_data = 3;
}  

message  GetSpecResponse {
	required OpResult result = 1;
	optional string spec = 2;
	optional bytes extra_data = 3;
} 

message GetVolumeInfoRequest {
	required Dict dict = 1;
}  
message  GetVolumeInfoResponse {
	required OpResult result = 1;
	optional string op_errstr = 2;
	optional Dict dict = 3;
} 

message MgmtHndskRequest {
	required bytes   hndsk = 1;
}  

message  MgmtHndskResponse {
	required OpResult result = 1;
	optional bytes   hndsk = 2;
} 

message LogRequest {
	required bytes msg = 1;
} 

message NotifyRequest {
	required uint32  flags = 1;
	required string buf = 2;
	optional bytes extra_data = 3;
}  

message NotifyResponse {
	required OpResult result = 1;
	optional uint32  flags = 2;
	optional string buf = 3;
	optional bytes extra_data = 4;
}  

message ReleasedirRequest {
	required string gfid = 1;
	required uint64 fd = 2;
	optional bytes extra_data = 3;
}  

message ReleaseRequest {
	required string gfid = 1;
	required uint64 fd = 2;
	optional bytes extra_data = 3;
}  

message DirListEntry {
	required uint64 d_ino = 1;
	required uint64 d_off = 2;
	required uint32 d_len = 3;
	required uint32 d_type = 4;
	required string name = 5;
}

message DirList {
	repeated DirListEntry entry = 1;
}

message ReaddirResponse {
	required OpResult result = 1;
	optional DirList reply = 2;
	optional bytes extra_data = 3;
}

message DirPListEntry {
	required uint64 d_ino = 1;
	required uint64 d_off = 2;
	required uint32 d_len = 3;
	required uint32 d_type = 4;
	required string name = 5;
	required Iatt stat = 6;
	required Dict dict = 7;
}

message DirPList {
	repeated DirPListEntry entry = 1;
}

message readdirpResponse {
	required OpResult result = 1;
	optional DirPList reply = 2;
	optional bytes extra_data = 3;
}

message Set_lk_verResponse {
	required OpResult result = 1;
	optional int32 lk_ver = 2;
}

message Set_lk_verRequest {
	required string uid = 1;
	required int32 lk_ver = 2;
}

message EventNotifyRequest {
	required int32 op = 1;
	required Dict dict = 2;
}

message EventNotifyResponse {
	required OpResult result = 1;
	optional bytes dict = 2;
}


message GetSnapNameUuidRequest {
	required Dict dict = 1;
}

message GetSnapNameUuidResponse {
	required OpResult result = 1;
	optional Dict dict = 2;
}

message compoundRequest {
	required int32 compound_version = 1;
	repeated Fop requests = 2;
	optional bytes extra_data = 3;
}

message CompoundResponse {
	required OpResult result = 1;
	optional bytes extra_data = 2;
}

message LocklistEntry {
	required ProtoFlock flock = 1;
	required string client_uid = 2;
	required uint32 lk_flags = 3;
}

message LockList {
	repeated LocklistEntry entry = 1;
}

message GetactivelkResponse {
	required OpResult result = 1;
	optional LockList reply = 2;
	optional bytes extra_data = 3;
}

message GetactivelkRequest {
	required string gfid = 1;
	optional bytes extra_data = 2;
}

message SetactivelkResponse {
	required OpResult result = 1;
	optional bytes extra_data = 2;
}

message SetactivelkRequest {
	required string gfid = 1;
	required LockList request = 2;
	optional bytes extra_data = 3;
}

message Request {
	required Fop fop = 0;
	optional StatRequest stat = 1;
	optional ReadlinkRequest  readlink = 2;
	optional MknodRequest mknod = 3;
	optional MkdirRequest  mkdir = 4;
	optional UnlinkRequest unlink = 5;
	optional RmdirRequest  rmdir = 6;
	optional SymlinkRequest  symlink = 7;
	optional RenameRequest  rename = 8;
	optional LinkRequest  link = 9;
	optional truncateRequest  truncate = 10;
	optional OpenRequest  open = 11;
	optional ReadRequest  read = 12;
	optional LookupRequest  lookup = 13;
	optional WriteRequest  write = 14;
	optional StatfsRequest statfs = 15;
	optional LockRequest  lock = 16;
	optional LeaseRequest  lease = 17;
	optional RecallLeaseRequest  recall_lease = 18;
	optional InodelkRequest  inode_lock = 19;
	optional FinodelkRequest  finode_lock = 20;
	optional FlushRequest  flush = 21;
	optional FsyncRequest  fsync = 22;
	optional SetxattrRequest  setxattr = 23;
	optional FsetxattrRequest  fsetxattr = 24;
	optional XattropRequest  xattrop = 25;
	optional FxattropRequest fxattrop = 26;
	optional GetXattrRequest  getxattr = 27;
	optional FgetxattrRequest fgetxattr = 28;
	optional RemovexattrRequest  removexattr = 29;
	optional FremovexattrRequest  fremovexattr = 30;
	optional OpendirRequest opendir = 31;
	optional FsyncdirRequest fsyncdir = 32;
	optional ReaddirRequest  readdir = 33;
	optional ReaddirpRequest readdirp = 34;
	optional AccessRequest   access = 35;
	optional CreateRequest  create = 36;
	optional FtruncateRequest ftruncate = 37;
	optional FstatRequest  fstat = 38;
	optional EntrylkRequest  entry_lock= 39;
	optional FentrylkRequest  fentry_lock = 40;
	optional SetattrRequest  setattr = 41;
	optional FsetattrRequest  fsetattr = 42;
	optional FallocateRequest  fallocate = 43;
	optional DiscardRequest  discard = 44;
	optional ZerofillRequest  zerofill = 45;
	optional RchecksumRequest  rchecksum = 46;
	optional IpcRequest  ipc = 47;
	optional SeekRequest  seek = 48;
	optional SetVolumeRequest  set_volume = 49;
	optional GetSpecRequest  get_spec = 50;
	optional GetVolumeInfoRequest  get_volume_info = 51;
	optional MgmtHndskRequest  mgmt_handshake = 52;
	optional LogRequest  log = 53;
	optional NotifyRequest  notify = 54;
	optional ReleasedirRequest  releasedir = 55;
	optional ReleaseRequest  release = 56;
	optional Set_lk_verRequest  set_lock_vers = 57;
	optional EventNotifyRequest  event_notify = 58;
	optional GetSnapNameUuidRequest  getsnapname = 59;
	optional compoundRequest  compound = 60;
	optional GetactivelkRequest  getactive_lock = 61;
	optional SetactivelkRequest  setactive_lock = 62;
}

message Response {
	required Fop fop = 0;
	optional StatResponse  stat = 1;
	optional ReadlinkResponse readlink = 2;
	optional MknodResponse  mknod = 3;
	optional MkdirResponse  mkdir = 4;
	optional UnlinkResponse  unlink = 5;
	optional StatResponse  stat = 6;
	optional ReadlinkResponse  readlink = 7;
	optional RmdirResponse  rmdir = 11;
	optional SymlinkResponse  symlink = 12;
	optional RenameResponse  rename = 13;
	optional LinkResponse  link = 14;
	optional truncateResponse  truncate = 15;
	optional OpenResponse  open = 16;
	optional ReadResponse  read = 17;
	optional LookupResponse  lookup = 18;
	optional WriteResponse  write = 19;
	optional StatfsResponse  statfs = 20;
	optional LockResponse  lock = 21;
	optional LeaseResponse  lease = 22;
	optional FsyncResponse  fsync = 23;
	optional XattropResponse   xattrop = 24;
	optional FxattropResponse   fxattrop = 25;
	optional GetxattrResponse  getxattr = 26;
	optional FgetxattrResponse  fgetxattr = 27;
	optional OpendirResponse  opendir = 28;
	optional CreateResponse  create = 29;
	optional FtruncateResponse  ftruncate = 30;
	optional FstatResponse fstat = 31;
	optional SetattrResponse  setattr = 32;
	optional FsetattrResponse  fsetattr = 33;
	optional FallocateResponse  fallocate = 34;
	optional DiscardResponse  discard = 35;
	optional ZerofillResponse  zerofill = 36;
	optional RchecksumResponse  rchecksum = 37;
	optional IpcResponse  ipc = 38;
	optional SeekResponse  seek = 39;
	optional SetVolumeResponse  set_volume = 40;
	optional GetSpecResponse  get_spec = 41;
	optional GetVolumeInfoResponse  get_volume_info = 42;
	optional MgmtHndskResponse  mgmt_handshake = 43;
	optional NotifyResponse  notify = 44;
	optional ReaddirResponse  readdir = 45;
	optional readdirpResponse  readdirp = 46;
	optional Set_lk_verResponse  set_lock_vers = 47;
	optional EventNotifyResponse  event_notify = 48;
	optional GetSnapNameUuidResponse  get_snap_name_uuid = 49;
	optional CompoundResponse  compound = 50;
	optional GetactivelkResponse  get_active_lock = 51;
	optional SetactivelkResponse  set_active_lock = 52;
}
