// Copyright 2018 The Rusix Project Developers. See the COPYRIGHT
// file at the top-level directory of this distribution.
//
// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or
// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license
// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your
// option. This file may not be copied, modified, or distributed
// except according to those terms.

enum ResultType: bool {
	Ok = 0,
	Err
}

enum Errno: int32 {
 UNKNOWN =    0,
 EPERM   =    1,  /* Operation not permitted */
 ENOENT  =    2,  /* No such file or directory */
 ESRCH   =    3,  /* No such process */
 EINTR   =    4,  /* Interrupted system call */
 EIO     =    5,  /* I/O error */
 ENXIO   =    6,  /* No such device or address */
 E2BIG   =    7,  /* Argument list too long */
 ENOEXEC =    8,  /* Exec format error */
 EBADF   =    9,  /* Bad file number */
 ECHILD  =   10,  /* No child processes */
 EAGAIN  =   11,  /* Try again */
 ENOMEM  =   12,  /* Out of memory */
 EACCES  =   13,  /* Permission denied */
 EFAULT  =   14,  /* Bad address */
 ENOTBLK =   15,  /* Block device required */
 EBUSY   =   16,  /* Device or resource busy */
 EEXIST  =   17,  /* File exists */
 EXDEV   =   18,  /* Cross-device link */
 ENODEV  =   19,  /* No such device */
 ENOTDIR =   20,  /* Not a directory */
 EISDIR  =   21,  /* Is a directory */
 EINVAL  =   22,  /* Invalid argument */
 ENFILE  =   23,  /* Filetable overflow */
 EMFILE  =   24,  /* Too many open files */
 ENOTTY  =   25,  /* Not a typewriter */
 ETXTBSY =   26,  /* Text file busy */
 EFBIG   =   27,  /* File too large */
 ENOSPC  =   28,  /* No space left on device */
 ESPIPE  =   29,  /* Illegal seek */
 EROFS   =   30,  /* Read-only file system */
 EMLINK  =   31,  /* Too many links */
 EPIPE   =   32,  /* Broken pipe */
 EDOM    =   33,  /* Math argument out of domain of func */
 ERANGE  =   34,  /* Math result not representable */

 EDEADLK =   35,  /* Resource deadlock would occur */
 ENAMETOOLONG =  36,  /* File name too long */
 ENOLCK   =  37,  /* No record locks available */
 ENOSYS   =  38,  /* Function not implemented */
 ENOTEMPTY = 39,  /* Directory not empty */
 ELOOP     = 40,  /* Too many symbolic links encountered */
 //EWOULDBLOCK = EAGAIN,  /* Operation would block */
 ENOMSG    = 42,  /* No message of desired type */
 EIDRM     = 43,  /* Identifier removed */
 ECHRNG    = 44,  /* Channel number out of range */
 EL2NSYNC  = 45,  /* Level 2, not synchronized */
 EL3HLT    = 46,  /* Level 3, halted */
 EL3RST    = 47,  /* Level 3, reset */
 ELNRNG    = 48,  /* Link number out of range */
 EUNATCH   = 49,  /* Protocol driver not attached */
 ENOCSI    = 50,  /* No CSI structure available */
 EL2HLT    = 51,  /* Level 2, halted */
 EBADE     = 52,  /* Invalid exchange */
 EBADR     = 53,  /* Invalid request descriptor */
 EXFULL    = 54,  /* Exchange full */
 ENOANO    = 55,  /* No anode */
 EBADRQC   = 56,  /* Invalid request code */
 EBADSLT   = 57,  /* Invalid slot */

 //EDEADLOCK = EDEADLK,

 EBFONT    = 59,  /* Bad font file format */
 ENOSTR    = 60,  /* Device not a stream */
 ENODATA   = 61,  /* No data available */
 ETIME     = 62,  /* Timer expired */
 ENOSR     = 63,  /* Out of streams resources */
 ENONET    = 64,  /* Machine is not on the network */
 ENOPKG    = 65,  /* Package not installed */
 EREMOTE   = 66,  /* Object is remote */
 ENOLINK   = 67,  /* Link has been severed */
 EADV      = 68,  /* Advertise error */
 ESRMNT    = 69,  /* Srmount error */
 ECOMM     = 70,  /* Communication error on send */
 EPROTO    = 71,  /* Protocol error */
 EMULTIHOP = 72,  /* Multihop attempted */
 EDOTDOT   = 73,  /* RFS specific error */
 EBADMSG   = 74,  /* Not a data message */
 EOVERFLOW = 75,  /* Value too large for defined data type */
 ENOTUNIQ  = 76,  /* Name not unique on network */
 EBADFD    = 77,  /* File descriptor in bad state */
 EREMCHG   = 78,  /* Remote address changed */
 ELIBACC   = 79,  /* Can not access a needed shared library */
 ELIBBAD   = 80,  /* Accessing a corrupted shared library */
 ELIBSCN   = 81,  /* .lib section in a.out corrupted */
 ELIBMAX   = 82,  /* Attempting to link in too many shared libraries */
 ELIBEXEC  = 83,  /* Cannot exec a shared library directly */
 EILSEQ    = 84,  /* Illegal byte sequence */
 ERESTART  = 85,  /* Interrupted system call should be restarted */
 ESTRPIPE  = 86,  /* Streams pipe error */
 EUSERS    = 87,  /* Too many users */
 ENOTSOCK  = 88,  /* Socket operation on non-socket */
 EDESTADDRREQ =  89,  /* Destination address required */
 EMSGSIZE  = 90,  /* Message too long */
 EPROTOTYPE =91,  /* Protocol wrong type for socket */
 ENOPROTOOPT=92,  /* Protocol not available */
 EPROTONOSUPPORT=93,  /* Protocol not supported */
 ESOCKTNOSUPPORT=94,  /* Socket type not supported */
 EOPNOTSUPP= 95,  /* Operation not supported on transport endpoint */
 EPFNOSUPPORT =  96,  /* Protocol family not supported */
 EAFNOSUPPORT =  97,  /* Address family not supported by protocol */
 EADDRINUSE =98,  /* Address already in use */
 EADDRNOTAVAIL = 99,  /* Cannot assign requested address */
 ENETDOWN  = 100, /* Network is down */
 ENETUNREACH=101, /* Network is unreachable */
 ENETRESET  =102, /* Network dropped connection because of reset */
 ECONNABORTED =  103, /* Software caused connection abort */
 ECONNRESET= 104, /* Connection reset by peer */
 ENOBUFS   = 105, /* No buffer space available */
 EISCONN   = 106, /* Transport endpoint is already connected */
 ENOTCONN  = 107, /* Transport endpoint is not connected */
 ESHUTDOWN = 108, /* Cannot send after transport endpoint shutdown */
 ETOOMANYREFS =  109, /* Too many references: cannot splice */
 ETIMEDOUT = 110, /* Connection timed out */
 ECONNREFUSED =  111, /* Connection refused */
 EHOSTDOWN = 112, /* Host is down */
 EHOSTUNREACH =  113, /* No route to host */
 EALREADY =  114, /* Operation already in progress */
 EINPROGRESS=115, /* Operation now in progress */
 ESTALE     =116, /* Stale NFS file handle */
 EUCLEAN    =117, /* Structure needs cleaning */
 ENOTNAM    =118, /* Not a XENIX named type file */
 ENAVAIL    =119, /* No XENIX semaphores available */
 EISNAM     =120, /* Is a named type file */
 EREMOTEIO  =121, /* Remote I/O error */
 EDQUOT     =122, /* Quota exceeded */

 ENOMEDIUM  =123, /* No medium found */
 EMEDIUMTYPE=124, /* Wrong medium type */
 ECANCELED  =125, /* Operation Canceled */
 ENOKEY     =126, /* Required key not available */
 EKEYEXPIRED=127, /* Key has expired */
 EKEYREVOKED=128, /* Key has been revoked */
 EKEYREJECTED =  129, /* Key was rejected by service */

/* for robust mutexes */
 EOWNERDEAD =130, /* Owner died */
 ENOTRECOVERABLE=131, /* State not recoverable */
}

// Note: These might not be necessary
enum Fop: uint8 {
	IPC          = 0,
	LOOKUP,
	MKNOD,
	CREATE,
	OPEN,
	STATFS,
	OPENDIR,
	READDIR,
	READDIRP,
	FSYNCDIR,
	SYMLINK,
	UNLINK,
	LINK,
	MKDIR,
	RMDIR,
	RENAME,
	ENTRYLK,
	FENTRYLK,
	STAT,
	FSTAT,
	ACCESS,
	READLINK,
	GETXATTR,
	FGETXATTR,
	READV,
	FLUSH,
	FSYNC,
	INODELK,
	FINODELK,
	LK,
	LEASE,
	FREMOVEXATTR,
	REMOVEXATTR,
	SETXATTR,
	FSETXATTR,
	TRUNCATE,
	FTRUNCATE,
	WRITEV,
	XATTROP,
	FXATTROP,
	SETATTR,
	FSETATTR,
	FALLOCATE,
	DISCARD,
	ZEROFILL,
}

table OpResult {
	result:ResultType;
	// error_msg is set if ERR
	errno:Errno;
	errorMsg:string;
}

// A block file type
table Block {
	
}

// A Character file type
table Character {
	
}

// A directory file type
table Directory {
	// Hashes of files in this virtual directory
	files: [FileHash];
}

// A Named Pipe file type
table Fifo {
	
}

// A Link file type
table Link {
}

// A Regular file type
table File {
	filename:string;
	contents:[ubyte];
}

// A Unix Domain Socket file type
table Socket {
	
}

table FileHash {
	//u512 hash
	hash:[ubyte];
}

table Statfs {
	bsize:uint64;
	frsize:uint64;
	blocks:uint64;
	bfree:uint64;
	bavail:uint64;
	files:uint64;
	ffree:uint64;
	favail:uint64;
	fsid:uint64;
	flag:uint64;
	namemax:uint64;
}

table ProtoFlock {
	type:uint32;
	whence:uint32;
	start:uint64;
	len:uint64;
	pid:uint32;
	lk_owner:string;
} 

table ProtoLease {
	cmd:uint32;
	lease_type:uint32;
	lease_id:string;
	lease_flags:uint32;
} 

table Iatt {
	ia_rfid:FileHash;
	ia_ino:uint64;
	ia_dev:uint64;
	mode:uint32;
	ia_nlink:uint64;
	ia_uid:uint32;
	ia_gid:uint32;
	ia_rdev:uint64;
	ia_size:int64;
	ia_blksize:int64;
	ia_blocks:int64;
	ia_atime:int64;
	ia_atime_nsec:int64;
	ia_mtime:int64;
	ia_mtime_nsec:int64;
	ia_ctime:int64;
	ia_ctime_nsec:int64;
}


table CacheInvalidationRequest {
	rfid:FileHash;
	event_type:uint32;
	flags:uint32;
	expire_time_attr:uint32;
	stat:Iatt;
	parent_stat:Iatt;
	oldparent_stat:Iatt;
}

table StatRequest {
	rfid:FileHash;
}

table StatResponse {
	result:OpResult;
	stat:Iatt;
}

table ReadlinkRequest {
	rfid:FileHash;
	size:uint32;
}

table ReadlinkResponse {
	result:OpResult;
	buf:Iatt;
	path:string;
} 

table MknodRequest {
	parent_rfid:FileHash;
	dev:uint64;
	mode:uint32;
	umask:uint32;
	bname:string;
} 

table MknodResponse {
	result:OpResult;
	stat:Iatt;
	preparent:Iatt;
	postparent:Iatt;
}

table MkdirRequest {
	parent_rfid:FileHash;
	mode:uint32;
	umask:uint32;
	bname:string;
}

table MkdirResponse {
	result:OpResult;
	stat:Iatt;
	preparent:Iatt;
	postparent:Iatt;
} 


table UnlinkRequest {
	parent_rfid:FileHash;
	bname:string;
	xflags:uint32;
}

table UnlinkResponse {
	result:OpResult;
	preparent:Iatt;
	postparent:Iatt;
}

table RmdirRequest {
	parent_rfid:FileHash;
	xflags:int32;
	bname:string;
}

table RmdirResponse {
	result:OpResult;
	preparent:Iatt;
	postparent:Iatt;
}

table SymlinkRequest {
	parent_rfid:FileHash;
	bname:string;
	umask:uint32;
	linkname:string;
}

table SymlinkResponse {
	result:OpResult;
	stat:Iatt;
	preparent:Iatt;
	postparent:Iatt;
}


table RenameRequest {
	oldrfid:FileHash;
	newrfid:FileHash;
	oldbname:string;
	newbname:string;
}

table RenameResponse {
	result:OpResult;
	stat:Iatt;
	preoldparent:Iatt;
	postoldparent:Iatt;
	prenewparent:Iatt;
	postnewparent:Iatt;
}

table LinkRequest {
	oldrfid:FileHash;
	newrfid:FileHash;
	newbname:string;
}

table LinkResponse {
	result:OpResult;
	stat:Iatt;
	preparent:Iatt;
	postparent:Iatt;
}

table TruncateRequest {
	rfid:FileHash;
	offset:uint64;
}

table TruncateResponse {
	result:OpResult;
	pre_stat:Iatt;
	post_stat:Iatt;
}

table OpenRequest {
	rfid:FileHash;
	flags:uint32;
}

table OpenResponse {
	result:OpResult;
	fd:uint64;
}

table ReadRequest {
	rfid:FileHash;
	fd:uint64;
	offset:uint64;
	size:uint64;
	flag:int32;
}

table ReadResponse {
	result:OpResult;
	stat:Iatt;
	data:[ubyte];
}

table LookupRequest {
	rfid:FileHash;
	parent_rfid:FileHash;
	flags:uint32;
	bname:string;
}

table LookupResponse {
	result:OpResult;
	stat:Iatt;
	postparent:Iatt;
}

table WriteRequest {
	rfid:FileHash;
	fd:uint64;
	offset:uint64;
	flag:int32;
	data:[ubyte];
}

table WriteResponse {
	result:OpResult;
	pre_stat:Iatt;
	post_stat:Iatt;
}

table StatfsRequest {
	rfid:FileHash;
} 

table StatfsResponse {
	result:OpResult;
	statfs:Statfs;
} 

table LockRequest {
	rfid:FileHash;
	fd:uint64;
	cmd:uint32;
	type:uint32;
	flock:ProtoFlock;
} 
table LockResponse {
	result:OpResult;
	flock:ProtoFlock;
} 

table LeaseRequest {
	rfid:FileHash;
	lease:ProtoLease;
} 

table LeaseResponse {
	result:OpResult;
	lease:ProtoLease;
} 

table RecallLeaseRequest {
	rfid:FileHash;
	lease_type:uint32;
	tid:string;
} 

table InodelkRequest {
	rfid:FileHash;
	cmd:uint32;
	type:uint32;
	flock:ProtoFlock;
	volume:string;
} 

table FinodelkRequest {
	rfid:FileHash;
	fd:uint64;
	cmd:uint32;
	type:uint32;
	flock:ProtoFlock;
	volume:string;
} 

table FlushRequest {
	rfid:FileHash;
	fd:uint64;
} 

table FsyncRequest {
	rfid:FileHash;
	fd:uint64;
	data:uint32;
} 
table FsyncResponse {
	result:OpResult;
	pre_stat:Iatt;
	post_stat:Iatt;
} 


table SetxattrRequest {
	rfid:FileHash;
	flags:uint32;
} 

table FsetxattrRequest {
	rfid:FileHash;
	fd:uint64;
	flags:uint32;
} 

table XattropRequest {
	rfid:FileHash;
	flags:uint32;
} 

table XattropResponse {
	result:OpResult;
} 

table FxattropRequest {
	rfid:FileHash;
	fd:uint64;
	flags:uint32;
} 

table FxattropResponse {
	result:OpResult;
} 


table GetXattrRequest {
	rfid:FileHash;
	namelen:uint32;
	name:string;
} 

table GetxattrResponse {
	result:OpResult;
} 


table FgetxattrRequest {
	rfid:FileHash;
	fd:uint64;
	namelen:uint32;
	name:string;
} 
table FgetxattrResponse {
	result:OpResult;
} 

table RemovexattrRequest {
	rfid:FileHash;
	name:string;
} 

table FremovexattrRequest {
	rfid:FileHash;
	fd:uint64;
	name:string;
} 

table OpendirRequest {
	rfid:FileHash;
} 
table OpendirResponse {
	result:OpResult;
	fd:uint64;
} 


table FsyncdirRequest {
	rfid:FileHash;
	fd:uint64;
} 

table ReaddirRequest {
	rfid:FileHash;
	fd:uint64;
	offset:uint64;
	size:uint32;
}

table ReaddirpRequest {
	rfid:FileHash;
	fd:uint64;
	offset:uint64;
	size:uint32;
} 


table AccessRequest {
	rfid:FileHash;
	mask:uint32;
    uid:uint32;
    gid:uint32;
} 


table CreateRequest {
	parent_rfid:FileHash;
	flags:int32;
	mode:uint32;
	umask:uint32;
	bname:string;
} 

table CreateResponse {
	result:OpResult;
	stat:Iatt;
	fd:uint64;
	preparent:Iatt;
	postparent:Iatt;
} 

table FtruncateRequest {
	rfid:FileHash;
	fd:uint64;
	offset:uint64;
} 
table FtruncateResponse {
	result:OpResult;
	pre_stat:Iatt;
	post_stat:Iatt;
} 

table FstatRequest {
	rfid:FileHash;
	fd:uint64;
} 

table FstatResponse {
	result:OpResult;
	stat:Iatt;
} 

table EntrylkRequest {
	rfid:FileHash;
	cmd:uint32;
	type:uint32;
	namelen:uint64;
	name:string;
	volume:string;
}

table FentrylkRequest {
	rfid:FileHash;
	fd:uint64;
	cmd:uint32;
	type:uint32;
	namelen:uint64;
	name:string;
	volume:string;
}


table SetattrRequest {
	rfid:FileHash;
	stbuf:Iatt;
	valid:int32;
} 
table SetattrResponse {
	result:OpResult;
	statpre:Iatt;
	statpost:Iatt;
} 

table FsetattrRequest {
	fd:uint64;
	stbuf:Iatt;
	valid:int32;
} 
table FsetattrResponse {
	result:OpResult;
	statpre:Iatt;
	statpost:Iatt;
} 

table FallocateRequest {
	rfid:FileHash;
	fd:uint64;
	flags:uint32;
	offset:uint64;
	size:uint64;
} 

table FallocateResponse {
	result:OpResult;
	statpre:Iatt;
	statpost:Iatt;
} 

table DiscardRequest {
	rfid:FileHash;
	fd:uint64;
	offset:uint64	;
	size:uint64	;
} 

table DiscardResponse {
	result:OpResult;
	statpre:Iatt;
	statpost:Iatt;
} 

table ZerofillRequest {
	rfid:FileHash;
	fd:uint64;
	offset:uint64;
	size:uint64;
} 

table ZerofillResponse {
	result:OpResult;
	statpre:Iatt;
	statpost:Iatt;
} 


table RchecksumRequest {
	fd:uint64;
	offset:uint64;
	len:uint32;
} 

table RchecksumResponse {
	result:OpResult;
	weak_checksum:uint32;
	strong_checksum:string;
} 


table IpcRequest {
	op:uint32;
}

table IpcResponse {
	result:OpResult;
}


table SeekRequest {
	rfid:FileHash;
	fd:uint64;
	offset:uint64;
	what:int32;
}

table SeekResponse {
	result:OpResult;
	offset:uint64;
}


table SetVolumeRequest {
} 

table SetVolumeResponse {
	result:OpResult;
} 

table GetSpecRequest {
	flags:uint32;
	key:string;
} 

table GetSpecResponse {
	result:OpResult;
	spec:string;
} 

table GetVolumeInfoRequest {
} 
table GetVolumeInfoResponse {
	result:OpResult;
	op_errstr:string;
} 

table MgmtHndskRequest {
	hndsk:string;
} 

table MgmtHndskResponse {
	result:OpResult;
	hndsk:string;
} 

table LogRequest {
	msg:string;
} 

table NotifyRequest {
	flags:uint32;
	buf:string;
} 

table NotifyResponse {
	result:OpResult;
	flags:uint32;
	buf:string;
} 

table ReleasedirRequest {
	rfid:FileHash;
	fd:uint64;
} 

table ReleaseRequest {
	rfid:FileHash;
	fd:uint64;
} 

table DirListEntry {
	d_ino:uint64;
	d_off:uint64;
	d_len:uint32;
	d_type:uint32;
	name:string;
}

table DirList {
	entry:[DirListEntry];
}

table ReaddirResponse {
	result:OpResult;
	reply:DirList;
}

table DirPListEntry {
	d_ino:uint64;
	d_off:uint64;
	d_len:uint32;
	d_type:uint32;
	name:string;
	stat:Iatt;
}

table DirPList {
	entry:[DirPListEntry];
}

table ReaddirpResponse {
	result:OpResult;
	reply:DirPList;
}

table Set_lk_verResponse {
	result:OpResult;
	lk_ver:int32;
}

table Set_lk_verRequest {
	uid:string;
	lk_ver:int32;
}

table EventNotifyRequest {
	op:int32;
}

table EventNotifyResponse {
	result:OpResult;
}

table GetSnapNameUuidRequest {
}

table GetSnapNameUuidResponse {
	result:OpResult;
}

table CompoundRequest {
	compound_version:int32;
	requests:[Fop];
}

table CompoundResponse {
	result:OpResult;
}

table LocklistEntry {
	flock:ProtoFlock;
	client_uid:string;
	lk_flags:uint32;
}

table LockList {
	entry:[LocklistEntry];
}

table GetactivelkResponse {
	result:OpResult;
	reply:LockList;
}

table GetactivelkRequest {
	rfid:FileHash;
}

table SetactivelkResponse {
	result:OpResult;
}

table SetactivelkRequest {
	rfid:FileHash;
	request:LockList;
}

table Operation {
	fop_type:Fop;
	access:AccessRequest;
	cache_invalidate:CacheInvalidationRequest;
	compound:CompoundRequest;
	creat:CreateRequest;
	discard:DiscardRequest;
	entrylk:EntrylkRequest;
	event_notify:EventNotifyRequest;
	fallocate:FallocateRequest;
	fentrylk:FentrylkRequest;
	fgetxattr:FgetxattrRequest;
	finodelk:FinodelkRequest;
	flush:FlushRequest;
	fremovexattr:FremovexattrRequest;
	fsetattr:FsetattrRequest;
	fsetxattr:FsetxattrRequest;
	fstat:FstatRequest;
	fsyncdir:FsyncdirRequest;
	fsync:FsyncRequest;
	ftruncate:FtruncateRequest;
	fxattrop:FxattropRequest;
	getactivelk:GetactivelkRequest;
	get_snap_name_uuid:GetSnapNameUuidRequest;
	get_spec:GetSpecRequest;
	get_volume_info:GetVolumeInfoRequest;
	getxattr:GetXattrRequest;
	inodelk:InodelkRequest;
	ipc:IpcRequest;
	lease:LeaseRequest;
	link:LinkRequest;
	lock:LockRequest;
	log:LogRequest;
	lookup:LookupRequest;
	mgmt_hndsk:MgmtHndskRequest;
	mkdir:MkdirRequest;
	mknod:MknodRequest;
	notify:NotifyRequest;
	opendir:OpendirRequest;
	open:OpenRequest;
	rchecksum:RchecksumRequest;
	readdirp:ReaddirpRequest;
	readdir:ReaddirRequest;
	readlk:ReadlinkRequest;
	read:ReadRequest;
	recall:RecallLeaseRequest;
	releasedir:ReleasedirRequest;
	release:ReleaseRequest;
	removexattr:RemovexattrRequest;
	rename:RenameRequest;
	rmdir:RmdirRequest;
	seek:SeekRequest;
	setactivelk:SetactivelkRequest;
	setattr:SetattrRequest;
	set_lk_ver:Set_lk_verRequest;
	set_volume:SetVolumeRequest;
	setxattr:SetxattrRequest;
	statfs:StatfsRequest;
	stat:StatRequest;
	symlink:SymlinkRequest;
	truncate:TruncateRequest;
	unlink:UnlinkRequest;
	write:WriteRequest;
	xattrop:XattropRequest;
	zerofill:ZerofillRequest;
}

root_type Operation;
